class Solution{
    public int minCost(int[][] costs){
        //null
        if(costs == null || costs.length == 0) return 0;
        int n = costs.length;
        int [][] dp = new int[n][3];
        dp[n-1][0] = costs[n-1][0];
        dp[n-1][1] = costs[n-1][1];
        dp[n-1][2] = costs[n-1][2];
        for(int i = n-2;i>=0;i--){
            dp[i][0] = costs[i][0] + Math.min(dp[i+1][1],dp[i+1][2]);
            dp[i][1] = costs[i][1] + Math.min(dp[i+1][0],dp[i+1][2]);
            dp[i][2] = costs[i][2] + Math.min(dp[i+1][0],dp[i+1][1]);
        }
        return Math.min(dp[0][0], Math.min(dp[0][1], dp[0][2]));


    }



}





/*class Solution {
    public int minCost(int[][] costs) {
        int costR = helper(costs,0,0,0);
        int costB = helper(costs,0,1,0);
        int costG = helper(costs,0,2,0);
        return Math.min(costR, Math.min(costB, costG));
    }
    private int helper(int[][] costs, int i, int color, int amount){
        //base

        if(i == costs.length) return amount;
        //logic
        if(color == 0){
            return Math.min(helper(costs, i+1, 1, amount + costs[i][0]),
                                helper(costs,i+1,2,amount + costs[i][0]));

        }
        if(color == 1){
            return Math.min(helper(costs, i+1, 0, amount + costs[i][1]),
                                helper(costs,i+1,2,amount + costs[i][1]));

        }
        if(color == 2){
            return Math.min(helper(costs, i+1, 0, amount + costs[i][2]),
                                helper(costs,i+1,1,amount + costs[i][2]));

        }
        return 88969;
    }
}*/
