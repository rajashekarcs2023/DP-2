class Solution {
    public int change(int amount, int[] coins) {
        //null
        if(coins == null) return 0;
        int m = coins.length; int n = amount;
        int [][]dp = new int[m+1][n+1];
        dp[0][0] = 1;
        for(int i = 1; i <= m; i++){
            for(int j = 0; j <= n; j++){
                //denom of coin is > amount
                if(j < coins[i-1]){
                    dp[i][j] = dp[i-1][j];
                } else{
                    dp[i][j] = dp[i-1][j] + dp[i][j - coins[i-1]];
                }
            }
        }
        return dp[m][n]; 




    }
}











/*
TC = O(2^m+n)
class Solution {
    public int change(int amount, int[] coins) {
        //null
        if(coins == null) return 0;
        return helper(coins, 0, amount);
    }
    private int helper(int [] coins, int idx, int amount){
        //base
        if(amount == 0) return 1;
        if(amount < 0 || idx == coins.length) return 0;

        //logic
        //dont choose
        int case0 = helper(coins, idx + 1, amount);
        //choose
        int case1 = helper(coins, idx, amount - coins[idx]);
        return case0+case1;

    }
}*/
